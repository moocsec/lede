#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-22.04

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev

          df -h
		  git clone --depth 1 https://github.com/xiaorouji/openwrt-passwall.git package/passwall
		  

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:

          cat >> .config <<EOF
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_KERNEL_BUILD_USER="OpenWrt-CI"
          CONFIG_KERNEL_BUILD_DOMAIN="Azure"
		  CONFIG_TARGET_x86=y
		  CONFIG_TARGET_x86_64=y
		  CONFIG_TARGET_x86_64_Generic=y
		  CONFIG_TARGET_IMAGES_GZIP=y
		  CONFIG_PACKAGE_kmod-ath=y
		  CONFIG_ATH_USER_REGD=y
		  CONFIG_PACKAGE_ATH_DFS=y
		  CONFIG_PACKAGE_kmod-ath10k=y
		  CONFIG_ATH10K_LEDS=y
		  CONFIG_ATH10K_THERMAL=y
		  CONFIG_PACKAGE_kmod-ath5k=y
		  CONFIG_PACKAGE_kmod-ath9k=y
		  CONFIG_ATH9K_SUPPORT_PCOEM=y
		  CONFIG_PACKAGE_kmod-ath9k-common=y
		  CONFIG_PACKAGE_kmod-ath9k-htc=y
		  CONFIG_PACKAGE_kmod-cfg80211=y
		  CONFIG_PACKAGE_kmod-mac80211=y
		  CONFIG_PACKAGE_MAC80211_DEBUGFS=y
		  CONFIG_PACKAGE_MAC80211_MESH=y
		  CONFIG_PACKAGE_kmod-rt2800-lib=y
		  CONFIG_PACKAGE_kmod-rt2800-usb=y
		  CONFIG_PACKAGE_kmod-rt2x00-lib=y
		  CONFIG_PACKAGE_kmod-rt2x00-usb=y
		  CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
		  CONFIG_PACKAGE_ipv6helper=y
		  CONFIG_PACKAGE_kmod-usb3=y
		  CONFIG_PACKAGE_kmod-usb-storage=y
		  CONFIG_PACKAGE_kmod-usb-storage-extras=y
		  CONFIG_PACKAGE_kmod-fs-ext4=y
		  CONFIG_PACKAGE_kmod-fs-ntfs=y
		  CONFIG_PACKAGE_luci-app-samba=y
		  CONFIG_PACKAGE_luci-app-vsftpd=y
		  CONFIG_PACKAGE_luci-app-frpc=y
		  CONFIG_PACKAGE_luci-app-zerotier=y
		  CONFIG_PACKAGE_luci-app-ddns=y
		  CONFIG_PACKAGE_luci-app-wol=y
		  CONFIG_PACKAGE_luci-app-upnp=y
		  CONFIG_PACKAGE_luci-app-unblockmusic=y
		  CONFIG_PACKAGE_luci-app-jd-dailybonus=y
		  CONFIG_PACKAGE_luci-app-accesscontrol=y
		  CONFIG_PACKAGE_luci-app-arpbind=y
		  CONFIG_PACKAGE_luci-app-autoreboot=y
		  CONFIG_PACKAGE_luci-app-diskman_INCLUDE_btrfs_progs=y
		  CONFIG_PACKAGE_luci-app-diskman_INCLUDE_lsblk=y
		  CONFIG_PACKAGE_luci-app-filetransfer=y
		  CONFIG_PACKAGE_luci-app-firewall=y
		  CONFIG_PACKAGE_luci-app-nlbwmon=y
		  CONFIG_PACKAGE_luci-app-ramfree=y
		  CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-webui=y
		  CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-ng=y
		  CONFIG_PACKAGE_luci-app-ttyd=y
		  CONFIG_PACKAGE_luci-app-turboacc=y
		  CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_OFFLOADING=y
		  CONFIG_PACKAGE_luci-app-vlmcsd=y
		  CONFIG_PACKAGE_luci-theme-bootstrap=y
		  CONFIG_PACKAGE_luci-app-ssr-plus=y
		  CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray=y
		  CONFIG_PACKAGE_htop=y
		  CONFIG_PACKAGE_automount=y
		  CONFIG_PACKAGE_openssh-sftp-server=y
		  CONFIG_PACKAGE_luci-app-openclash=y
          EOF

          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@master
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
